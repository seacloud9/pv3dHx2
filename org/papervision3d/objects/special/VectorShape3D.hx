package org.papervision3d.objects.special {	import org.papervision3d.core.geom.Vertices3D;	import org.papervision3d.core.geom.renderables.Vertex3D;	import org.papervision3d.core.proto.GeometryObject3D;	import org.papervision3d.core.proto.MaterialObject3D;	import org.papervision3d.core.render.command.RenderVectorShape;	import org.papervision3d.core.render.data.RenderSessionData;	import org.papervision3d.materials.special.VectorShapeMaterial;	import org.papervision3d.objects.DisplayObject3D;			/**	 * @author Mark Barcinski	 */	class VectorShape3D extends Vertices3D {		public var graphicsCommands:Array<Dynamic>;		public var renderCommand:RenderVectorShape;		public var graphics:Graphics3D;				public function new(material:MaterialObject3D , vertices:Array<Dynamic>=null, name:String=null){			graphics=new Graphics3D(this);			graphicsCommands=[];			renderCommand=new RenderVectorShape(this);			renderCommand.renderer=cast(material, VectorShapeMaterial);			this.material=material;						super(vertices, name);		}				public override function project(parent:DisplayObject3D,  renderSessionData:RenderSessionData):Float		{			var temp:Float=super.project(parent, renderSessionData);			//trace("temp" , temp)			//if(temp==0)return 0;			var visible:Bool=false;			var screenZ:Float=0;						for(var vertex:Vertex3D in geometry.vertices){				screenZ +=vertex.vertex3DInstance.z;				visible=(vertex.vertex3DInstance.z>0 || visible);			}						if(visible)			{				renderSessionData.renderer.addToRenderList(renderCommand);				this.screenZ=screenZ / geometry.vertices.length;				renderCommand.screenZ=this.screenZ;			}							return temp;		}				override public var material(null, set_material):MaterialObject3D;
 	private function set_material(material:MaterialObject3D):Void		{			super.material=material;			renderCommand.renderer=cast(material, VectorShapeMaterial);		}	}