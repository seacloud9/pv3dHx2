package org.papervision3d.typography {	import org.papervision3d.core.proto.MaterialObject3D;	import org.papervision3d.materials.special.Letter3DMaterial;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.special.VectorShape3D;		/**	 * @author Mark Barcinski	 */	class Text3D extends VectorShape3D {		public var letters:Array<Dynamic>;				private var _text:String;		public var font:Font3D;				public var lines:Array<Dynamic>;						private var _letterSpacing:Float=0;		private var _lineSpacing:Float=0;		private var _align:String="center";				private var _lineHeight:Float=0;							public function new(text:String , font:Font3D , material:MaterialObject3D, 								name:String=null){			//super(name, geometry);			//TODO temp stuff , revert textfield back to displayobject after debug			super(material, null , name);						this.material=material;			this.font=font;			_text=text.replace(/\r/gi, "\n");						//letters=[];						_lineHeight=font.height + _lineSpacing;									createLetters(material);			alignLetters();					}				private function createLetters(material:MaterialObject3D):Void 		{			lines=[];			letters=[];			var textLine:String;			var textLines:Array<Dynamic>=_text.split("\n");			var letter:VectorLetter3D;			var lineLetters:Array<Dynamic>;						for(i in 0...textLines.length)			{				lineLetters=new Array();				lines[i]=lineLetters;				textLine=textLines[i];								for(j in 0...textLine.length)				{					var char:String=textLine.charAt(j);					letter=new VectorLetter3D(char, material as Letter3DMaterial, font);										lineLetters.push(letter);					if(char !=" ")addChild(letter);						letters.push(letter);				}			}		}				private function alignLetters():Void 		{			var letter:Letter3D;			var prevLetter:Letter3D;			var lineLetters:Array<Dynamic>;			var currY:Float=0;									// used for align			var first:Letter3D;			var last:Letter3D;			var tx:Float;						for(i in 0...lines.length)			{				lineLetters=lines[i];				currY=i * - _lineHeight;								first=lineLetters[0];				last=lineLetters[lineLetters.length-1];								for(j in 0...lineLetters.length)				{					letter=lineLetters[j];										letter.x=j>0 ? prevLetter.x +(prevLetter.width/2 + letter.width/2)+ _letterSpacing:letter.width / 2;					letter.y=currY;										prevLetter=letter;				}								if(align=="center" && last){					tx=(last.x + last.width/2)/ 2;					for(j=0;j<lineLetters.length;j++)					{						DisplayObject3D(lineLetters[j]).x -=tx;							}				}								if(align=="right" && last){					tx=last.x + last.width/2;					for(j=0;j<lineLetters.length;j++)					{						DisplayObject3D(lineLetters[j]).x -=tx;							}				}							}		}				private function removeLetters():Void {			for(var l:DisplayObject3D in letters){				removeChild(l);				}						letters.length=0;			lines.length=0;		}						///////////////////////////////////////////////		// getters and setters		///////////////////////////////////////////////						public var letterSpacing(get_letterSpacing, set_letterSpacing):Float;
 	private function get_letterSpacing():Float {			return _letterSpacing;		}				private function set_letterSpacing(spacing:Float):Void {			_letterSpacing=spacing;						alignLetters();		}				public var lineSpacing(get_lineSpacing, set_lineSpacing):Float;
 	private function get_lineSpacing():Float {			return _lineSpacing;		}				private function set_lineSpacing(lineSpacing:Float):Void {			_lineSpacing=lineSpacing;			_lineHeight=font.height + lineSpacing;						alignLetters();		}				public var align(get_align, set_align):String;
 	private function get_align():String {			return _align;		}				private function set_align(align:String):Void {			_align=align;						alignLetters();		}				public var text(get_text, set_text):String;
 	private function get_text():String {			return _text;		}				private function set_text(text:String):Void {			_text=text.replace(/\r/gi, "\n");						removeLetters();						createLetters(Letter3DMaterial(material));			alignLetters();		}	}